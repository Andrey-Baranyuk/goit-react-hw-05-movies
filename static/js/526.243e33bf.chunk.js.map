{"version":3,"file":"static/js/526.243e33bf.chunk.js","mappings":"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","sources":["Api/Api.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","webpack://react-homework-template/./src/components/MoviesDetailsPage/MoviesDetailsPage.module.css?77e7","components/MoviesDetailsPage/MoviesDetailsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9c745ff4be1ad36220d35c7d041cff56';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst getMovies = async () => {\n    const response  = await axios.get(\n        `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n    //console.log(response.data.results)\n\n    const trendingMovies = response.data.results.map(({ id, title }) => {\n        return { id, title }\n    }\n    );\n\n    return trendingMovies;\n}\n\nconst getMoviesById = async id => {\n    const responseId = await axios.get(\n        `${BASE_URL}/movie/${id}?api_key=${API_KEY}`,\n    );\n    return responseId.data;\n};\n\nconst getMoviesReviews = async id => {\n    const responseReviews = await axios.get(\n        `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`,\n    );\n\n    const reviewsMovies = responseReviews.data.results.map(\n        ({ author, content, id }) => {\n            return { author, content, id };\n        }\n    );\n    return reviewsMovies\n};\n\nconst getMoviesCasts = async id => {\n    const responseCasts = await axios.get(\n        `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`,\n    );\n    return responseCasts.data;\n}\n\nconst getMoviesQuery = async query => {\n    const responseCasts = await axios.get(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`,\n    );\n    return responseCasts.data.results;\n}\n\nexport{ getMovies, getMoviesById, getMoviesQuery, getMoviesCasts, getMoviesReviews}","import PropTypes from 'prop-types';\n\nconst Cast = ({ moviesIdCast }) => {\n    return (\n\n        <>\n            <h3>Cast</h3>\n            {moviesIdCast &&\n                moviesIdCast.cast.map(cast => (\n                    <div key={cast.id}>\n                        {cast.profile_path === null ? (\n                            <img\n                                src={`https://demofree.sirv.com/nope-not-here.jpg?w=150`}\n                                alt={cast.name}\n                                width=\"150\"\n                            />\n                        ) : (\n                            <img\n                                src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`}\n                                alt={cast.name}\n                                width=\"150\"\n                            />\n                        )}\n                        <p>{cast.name}</p>\n                        <p>Character: {cast.character}</p>\n                    </div>\n                ))}\n        </>\n    );\n};\n\nCast.propTypes = {\n    moviesIdCast: PropTypes.object.isRequired,\n};\n\nexport default Cast;\n","import PropTypes from 'prop-types';\n\nconst Reviews = ({ moviesIdReview }) => {\n    return (\n\n        <>\n            {moviesIdReview.length === 0 ? (\n                <p>No reviews</p>\n            ) : (\n                moviesIdReview &&\n                moviesIdReview.map(review => (\n                    <div key={review.id}>\n                        <h3>{review.author}</h3>\n                        <p>{review.content}</p>\n                    </div>\n                ))\n            )}\n        </>\n    );\n};\n\nReviews.propTypes = {\n    moviesIdReview: PropTypes.array.isRequired,\n};\n\nexport default Reviews;","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"MoviesDetailsPage_btn__WGoev\"};","import { useParams, Route, Link, useRouteMatch, useHistory, useLocation } from \"react-router-dom\";\nimport { getMoviesById, getMoviesReviews, getMoviesCasts } from \"Api/Api\";\nimport Cast from \"components/Cast/Cast\";\nimport Reviews from 'components/Reviews/Reviews';\nimport { useEffect, useRef, useState } from \"react\";\n\nimport styles from './MoviesDetailsPage.module.css'\n\nconst MovieDetailsPage = () => {\n    const match = useRouteMatch();\n    const [moviesIdInfo, setMoviesIdInfo] = useState(null);\n    const [moviesIdReview, setMoviesIdReview] = useState(null);\n    const [moviesIdCast, setMoviesIdCast] = useState(null);\n\n    const { moviesId } = useParams();\n\n    const routerState = useRef(null);\n\n    const history = useHistory();\n    const location = useLocation();\n\n    useEffect(() => {\n        if (!routerState.current) {\n            routerState.current = location.state;\n        }\n    }, [location.state]);\n\n    useEffect(() => {\n        getMoviesById(moviesId).then(setMoviesIdInfo);\n        getMoviesReviews(moviesId).then(setMoviesIdReview);\n        getMoviesCasts(moviesId).then(setMoviesIdCast);\n    }, [moviesId]);\n\n    return (\n        <>\n            <button className={styles.btn} onClick={() => {\n                const paramsPath = routerState.current.params.pathname;\n                const paramsSearch = routerState.current.params.search;\n                history.push(`${paramsPath}${paramsSearch}`);\n            }}>\n                Back\n                \n            </button>\n\n            <h2>MovieDetailsPage</h2>\n\n            {moviesIdInfo && (\n                <>\n                    <img\n                        src={`https://image.tmdb.org/t/p/w500${moviesIdInfo.poster_path}`}\n                        alt={moviesIdInfo.title}\n                        width=\"250\"\n                    />\n                    <h2>\n                        {moviesIdInfo.title}({moviesIdInfo.release_date.slice(0, 4)})\n                    </h2>\n                    <h3>Overview:</h3>\n                    <p>{moviesIdInfo.overview}</p>\n                    <h3>Genres</h3>\n                    <p>{moviesIdInfo.genres.map(genre => genre.name + ' ')}</p>\n                    <Link to={`${match.url}/cast`}>\n                        <li>Cast</li>\n                    </Link>\n                    <Link to={`${match.url}/reviews`}>\n                        <li>Reviews</li>\n                    </Link>\n                    <Route path={`${match.url}/cast`}>\n                        {moviesIdCast && <Cast moviesIdCast={moviesIdCast} />}\n                    </Route>\n                    <Route path={`${match.url}/reviews`}>\n                        {moviesIdReview && <Reviews moviesIdReview={moviesIdReview} />}\n                    </Route>\n        \n                </>\n            )}\n        </>\n    );        \n                \n}\n\nexport default MovieDetailsPage;"],"names":["API_KEY","BASE_URL","getMovies","axios","response","trendingMovies","data","results","map","id","title","getMoviesById","responseId","getMoviesReviews","responseReviews","reviewsMovies","author","content","getMoviesCasts","responseCasts","getMoviesQuery","query","moviesIdCast","cast","profile_path","src","alt","name","width","character","moviesIdReview","length","review","match","useRouteMatch","useState","moviesIdInfo","setMoviesIdInfo","setMoviesIdReview","setMoviesIdCast","moviesId","useParams","routerState","useRef","history","useHistory","location","useLocation","useEffect","current","state","then","className","styles","onClick","paramsPath","params","pathname","paramsSearch","search","push","poster_path","release_date","slice","overview","genres","genre","to","url","path"],"sourceRoot":""}